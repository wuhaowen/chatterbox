// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package msg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RouterKey struct {
	InstanceId           int32    `protobuf:"varint,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouterKey) Reset()         { *m = RouterKey{} }
func (m *RouterKey) String() string { return proto.CompactTextString(m) }
func (*RouterKey) ProtoMessage()    {}
func (*RouterKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *RouterKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouterKey.Unmarshal(m, b)
}
func (m *RouterKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouterKey.Marshal(b, m, deterministic)
}
func (m *RouterKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouterKey.Merge(m, src)
}
func (m *RouterKey) XXX_Size() int {
	return xxx_messageInfo_RouterKey.Size(m)
}
func (m *RouterKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RouterKey.DiscardUnknown(m)
}

var xxx_messageInfo_RouterKey proto.InternalMessageInfo

func (m *RouterKey) GetInstanceId() int32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *RouterKey) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type RouterResp struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouterResp) Reset()         { *m = RouterResp{} }
func (m *RouterResp) String() string { return proto.CompactTextString(m) }
func (*RouterResp) ProtoMessage()    {}
func (*RouterResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *RouterResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouterResp.Unmarshal(m, b)
}
func (m *RouterResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouterResp.Marshal(b, m, deterministic)
}
func (m *RouterResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouterResp.Merge(m, src)
}
func (m *RouterResp) XXX_Size() int {
	return xxx_messageInfo_RouterResp.Size(m)
}
func (m *RouterResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RouterResp.DiscardUnknown(m)
}

var xxx_messageInfo_RouterResp proto.InternalMessageInfo

func (m *RouterResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*RouterKey)(nil), "msg.RouterKey")
	proto.RegisterType((*RouterResp)(nil), "msg.RouterResp")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x57, 0x72, 0xe6, 0xe2, 0x0c, 0xca,
	0x2f, 0x2d, 0x49, 0x2d, 0xf2, 0x4e, 0xad, 0x14, 0x92, 0xe3, 0xe2, 0xca, 0xcc, 0x2b, 0x2e, 0x49,
	0xcc, 0x4b, 0x4e, 0xf5, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x42, 0x12, 0x11, 0x12,
	0xe3, 0x62, 0x2b, 0x2d, 0x4e, 0x2d, 0xf2, 0x4c, 0x91, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x82,
	0xf2, 0x94, 0xd4, 0xb8, 0xb8, 0x20, 0x86, 0x04, 0xa5, 0x16, 0x17, 0x08, 0x49, 0x70, 0xb1, 0x17,
	0x97, 0x26, 0x27, 0xa7, 0x16, 0x17, 0x83, 0x8d, 0xe0, 0x08, 0x82, 0x71, 0x8d, 0x1c, 0xb9, 0x78,
	0x21, 0xea, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x0c, 0xb8, 0x78, 0x03, 0x4a, 0x4b,
	0xa0, 0x7a, 0x4b, 0x73, 0x52, 0x85, 0xf8, 0xf4, 0x72, 0x8b, 0xd3, 0xf5, 0xe0, 0x2e, 0x92, 0xe2,
	0x47, 0xe2, 0x83, 0x0c, 0x4f, 0x62, 0x03, 0xbb, 0xdd, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x5c,
	0xf0, 0x39, 0x82, 0xc8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterServiceClient is the client API for RouterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterServiceClient interface {
	PutRouterRule(ctx context.Context, in *RouterKey, opts ...grpc.CallOption) (*RouterResp, error)
}

type routerServiceClient struct {
	cc *grpc.ClientConn
}

func NewRouterServiceClient(cc *grpc.ClientConn) RouterServiceClient {
	return &routerServiceClient{cc}
}

func (c *routerServiceClient) PutRouterRule(ctx context.Context, in *RouterKey, opts ...grpc.CallOption) (*RouterResp, error) {
	out := new(RouterResp)
	err := c.cc.Invoke(ctx, "/msg.RouterService/PutRouterRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServiceServer is the server API for RouterService service.
type RouterServiceServer interface {
	PutRouterRule(context.Context, *RouterKey) (*RouterResp, error)
}

func RegisterRouterServiceServer(s *grpc.Server, srv RouterServiceServer) {
	s.RegisterService(&_RouterService_serviceDesc, srv)
}

func _RouterService_PutRouterRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouterKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServiceServer).PutRouterRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.RouterService/PutRouterRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServiceServer).PutRouterRule(ctx, req.(*RouterKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.RouterService",
	HandlerType: (*RouterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutRouterRule",
			Handler:    _RouterService_PutRouterRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
